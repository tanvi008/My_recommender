# -*- coding: utf-8 -*-
"""FinalMovieRecomm. using knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZwQArLgG2-oNBciSGF1vybc8Vx3tlEHb
"""

#pip install requests fuzzywuzzy pandas pyjstat numpy plotly matplotlib seaborn geopy google folium pandas googlemaps

import pandas as pd
import numpy as np
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
from fuzzywuzzy import process

movies = pd.read_csv('/content/tmdb_5000_movies.csv')

print(movies.columns)

ratings = pd.read_csv('/content/ratings.csv')
print(ratings.columns)

movies = pd.read_csv('/home/tanvirupareliya/Desktop/movie recommender/tmdb_5000_movies.csv',usecols = ['id','title'], dtype= {'id ': 'int32', 'title':'str'} )
ratings = pd.read_csv('/home/tanvirupareliya/Desktop/movie recommender/ratings.csv',usecols = ['userId','movieId','rating'], dtype ={'userId':'Int64','movieId':'Int64','rating':'float'})

df_movies = movies
df_ratings = ratings

df_movies.head()
df_ratings.head()

## here one can take aany values instead of just rating like age group or based on genre anything.
movies_user = df_ratings.pivot(index = 'movieId',columns ='userId', values='rating').fillna(0)
#movies_user
mat_movies_user = csr_matrix(movies_user.values) 
x = mat_movies_user

#used brute force approch because it takes one value and then compares that value to all the other values.
from sklearn.neighbors import NearestNeighbors
model_knn = NearestNeighbors(metric ='cosine',algorithm ='brute', n_neighbors=20)

model_knn.fit(mat_movies_user)

def recommender(movie_name,data, model, n_recommendations):
  model.fit(data)
  idx = process.extractOne(movie_name,df_movies['title'])[2]
  print('Movies Selected: ',df_movies['title'][idx], 'Index: ',idx)
  print('----------------Your Recommendations are----------------')
  distances , indices=model.kneighbors(data[idx], n_neighbors = n_recommendations)
  for i in indices:
    return_df = (df_movies['title'][i].where(i!=idx))

    return return_df

# recommender("jumanji",x,model_knn,20)

# import pickle

# with open('model.bin','wb') as f_out:
#   pickle.dump(final_model,f_out)
#   f_out.close()

# with open('model.bin','rb')as f_in:
#   model = pickle.load(f_in)

recommender(input('Enter movie name:  '),mat_movies_user ,model_knn,20)

